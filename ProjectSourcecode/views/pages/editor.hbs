<!-- jQuery and jQuery UI (for resizable feature) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

<!-- CodeMirror CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
<!-- Optional: Theme for CodeMirror -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/monokai.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
<!-- Bootstrap JS Bundle (includes Popper) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style>
.latex-editor-container {
  display: flex;
  flex-direction: row;
  height: 100vh;
  padding: 20px;
  gap: 20px;
  background-color: #f5f5f5;
  box-sizing: border-box;
}

/* Editor Header Container Styling */
.editor-header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

/* Editor Header Styling */
.editor-header {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 0;
}

/* Editor Buttons Styling */
.editor-buttons {
  display: flex;
  gap: 5px;
  align-items: center;
}

/* Adjust margins for the title input */
#note-title {
  margin-bottom: 10px;
  padding: 8px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}


/* Remove bottom margin from editor-header to prevent extra space */

.preview-header-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 10 10 10px;
  border-bottom: 1px solid #ddd;
  margin-bottom: 15px;
  height: 40px;
}

.preview-header-left {
  font-size: 18px;
  font-weight: bold;
}

.preview-header-actions {
  display: flex;
  gap: 10px;
  align-items: center;
}

.preview-action-btn {
  padding: 6px 12px;
  background: none;
  border: 1px solid #ddd;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 5px;
}

.preview-action-btn:hover {
  background-color: #f5f5f5;
}

.ai-edit-btn {
  padding: 8px 16px;
  background-color: #6c757d;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.ai-edit-btn.active {
  background-color: #28a745;
}

body {
    font-family: 'Roboto', sans-serif;
  }

/* Load Notes Button and Dropdown Styling */
.load-notes-container {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  gap: 10px;
}

/* Editor Styling */
.editor {
  width: 50%;
  display: flex;
  flex-direction: column;
  border: 1px solid #ccc;
  border-radius: 6px;
  background-color: #fff;
  padding: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* CodeMirror Customization */
.CodeMirror {
  flex: 1;
  height: 100%;
  border: 1px solid #ddd;
  border-radius: 4px;
}

/* Preview Styling */
.preview-container {
  width: 50%;
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 10px 15px 15px 15px;
  background-color: #fff;
  overflow-y: auto;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}



/* Responsive Adjustments */
@media (max-width: 768px) {
  .latex-editor-container {
    flex-direction: column;
  }
  .editor, .preview-container {
    width: 100%;
  }
}

/* Modal Styles */
.modal-content {
  border-radius: 8px;
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
}

.modal-header {
  border-bottom: 2px solid #e9ecef;
}

.selected-content {
  max-height: 150px;
  overflow-y: auto;
  font-family: 'Courier New', monospace;
  font-size: 0.9em;
  background-color: #f8f9fa;
  white-space: pre-wrap;
}

.instruction-list {
  padding-left: 20px;
  color: #666;
}

.instruction-list li {
  margin-bottom: 8px;
}

.context-input-container {
  background-color: #fff;
  border-radius: 6px;
}

#contextInput {
  border: 1px solid #ced4da;
  border-radius: 6px;
  resize: vertical;
  font-size: 0.95em;
}

#contextInput:focus {
  border-color: #80bdff;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.modal-footer {
  border-top: 2px solid #e9ecef;
}

#submitContext {
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

#submitContext i {
  margin-right: 8px;
}

/* Add these new styles */
.highlighted-selection {
  background-color: rgba(144, 238, 144, 0.3); /* Soft lime green */
  transition: background-color 0.3s ease;
}

.selection-alert {
  background-color: #e8f5e9;
  border-left: 4px solid #4caf50;
  padding: 12px;
  margin-bottom: 20px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.selection-alert i {
  color: #4caf50;
  font-size: 1.2em;
}

/* Update modal styles */
#contextModal .modal-dialog {
  position: absolute;
  margin: 0;
  top: 50%;
  left: 20px; /* Distance from left edge */
  transform: translateY(-50%);
  width: calc(50% - 40px); /* Match editor width, accounting for padding */
  max-width: none;
}

/* Update highlighting styles */
.preview-highlight {
  background-color: rgba(144, 238, 144, 0.3);
  transition: background-color 0.3s ease;
}

</style>

<!-- Editor and Preview Containers -->
<div class="latex-editor-container">
  <!-- Editor Section -->
  <!-- Editor Section -->
  <div class="editor">
    <!-- Editor Header Container -->
    <div class="editor-header-container">
        <div class="editor-header">LaTeX Editor</div>
        <!-- Buttons Container -->
        <div class="editor-buttons">
        <!-- Load Notes Button and Dropdown -->
        <div class="dropdown">
            <button
            id="load-notes-btn"
            class="btn btn-secondary dropdown-toggle"
            type="button"
            data-bs-toggle="dropdown"
            aria-expanded="false"
            >
            Load Notes
            </button>
            <ul id="notes-dropdown" class="dropdown-menu" aria-labelledby="load-notes-btn">
            <!-- Dynamically populated list items -->
            </ul>
        </div>
        <!-- New Note Button -->
        <div class="dropdown">
          <button 
            id="new-note-btn" 
            class="btn btn-success dropdown-toggle" 
            type="button" 
            data-bs-toggle="dropdown" 
            aria-expanded="false"
          >
            New Note
          </button>
          <ul class="dropdown-menu" aria-labelledby="new-note-btn">
            <li><a class="dropdown-item" href="#" id="new-blank">
              <i class="fas fa-file"></i>
              <span>From Blank</span>
            </a></li>
            <li><a class="dropdown-item" href="#" id="new-from-text">
              <i class="fas fa-font"></i>
              <span>From Text</span>
            </a></li>
            <li><a class="dropdown-item" href="/scan" id="new-from-photo">
              <i class="fas fa-camera"></i>
              <span>From Photo</span>
            </a></li>
          </ul>
        </div>
        <!-- Save LaTeX Button -->
        <button id="save-latex" type="button" class="btn btn-primary">Save LaTeX</button>
        </div>
    </div>

    <!-- Title Input -->
    <input type="text" id="note-title" placeholder="Enter note title here" />

    <!-- LaTeX Textarea -->
    <textarea id="latex-editor"></textarea>
  </div>

  <!-- Preview Section -->
  <div class="preview-container">
    <div class="preview-header-container">
      <div class="preview-header-left">Preview</div>
      <div class="preview-header-actions">
        <button class="preview-action-btn" id="download-preview">
          <i class="fas fa-download"></i>
        </button>
        <button class="preview-action-btn" id="share-preview">
          <i class="fas fa-share-alt"></i>
        </button>
        <button class="ai-edit-btn" id="ai-edit-btn">
          Highlight text for AI editing
        </button>
      </div>
    </div>
    <div id="latex-preview" class="preview">
      <!-- Rendered HTML will appear here -->
    </div>
  </div>
</div>

<!-- Replace the existing modal with this updated version -->
<div class="modal fade" id="contextModal" tabindex="-1" aria-labelledby="contextModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-light">
        <h5 class="modal-title" id="contextModalLabel">AI LaTeX Editor</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="selection-alert">
          <i class="fas fa-check-circle"></i>
          <span>Your selection is highlighted in the preview panel</span>
        </div>

        <div class="instruction-container mb-4">
          <h6 class="fw-bold"><i class="fas fa-info-circle text-primary"></i> How this works:</h6>
          <ol class="instruction-list">
            <li>Your selected content is highlighted in the preview panel</li>
            <li>Describe what changes you'd like to make to this LaTeX content</li>
            <li>The AI will suggest improvements to your LaTeX code</li>
          </ol>
        </div>

        <div class="context-input-container">
          <label for="contextInput" class="form-label fw-bold">
            What changes would you like to make?
          </label>
          <textarea 
            id="contextInput" 
            class="form-control" 
            rows="4" 
            placeholder="Example: 'Fix the equation formatting', 'Add proper citations', 'Convert this to a table'..."
          ></textarea>
        </div>
      </div>
      <div class="modal-footer bg-light">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" id="submitContext" class="btn btn-primary">
          <i class="fas fa-magic"></i> Generate Changes
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add this modal HTML right after the existing contextModal div -->
<div class="modal fade" id="textToLatexModal" tabindex="-1" aria-labelledby="textToLatexModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="textToLatexModalLabel">Convert Text to LaTeX</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="alert alert-info" role="alert">
          <i class="fas fa-info-circle me-2"></i>
          Paste your text below and our AI will convert it to LaTeX format. Works best with mathematical and scientific text!
        </div>

        <div class="mb-3">
          <label for="textInput" class="form-label fw-bold">Your Text</label>
          <textarea 
            id="textInput" 
            class="form-control" 
            rows="10" 
            placeholder="Paste your text here..."
          ></textarea>
        </div>

        <div class="mb-3">
          <label class="form-label fw-bold">Additional Instructions (Optional)</label>
          <textarea 
            id="textInstructions" 
            class="form-control" 
            rows="2" 
            placeholder="Any specific formatting preferences or instructions..."
          ></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" id="convertToLatex" class="btn btn-primary">
          <i class="fas fa-magic me-2"></i>Convert to LaTeX
        </button>
      </div>
    </div>
  </div>
</div>

<!-- CodeMirror JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>
<!-- CodeMirror LaTeX Mode -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/stex/stex.min.js"></script>
<!-- Optional: CodeMirror Addons (e.g., line numbers, bracket matching) -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/closetag.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/edit/matchbrackets.min.js"></script>

<!-- LaTeX.js -->
<script src="https://cdn.jsdelivr.net/npm/latex.js/dist/latex.js"></script>

{{#if note}}
  <script>
      function unescapeLatex(text) {
        if (!text) return '';
        return text
          .replace(/\\'/g, "'")    // Unescape single quotes
          .replace(/\\"/g, '"')    // Unescape double quotes
          .replace(/\\\\/g, '\\')  // Handle escaped backslashes
          .replace(/&quot;/g, '"') // Handle HTML entities
          .replace(/&#027;/g, "'")
          .replace(/&amp;/g, '&')
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>');
      }
    document.addEventListener('DOMContentLoaded', function() {
      const titleInput = document.getElementById('note-title');
      titleInput.value = unescapeLatex(`{{note.title}}`);

      // Sanitize and set the editor content
      const content = unescapeLatex(`{{note.content}}`);
      editor.setValue(content);

      // Force a refresh of the editor
      editor.refresh();
      
      // Trigger a re-render of the preview
      renderLaTeX();
    });
  </script>
{{/if}}

<!-- jQuery UI for resizable functionality -->
<script>
  function unescapeLatex(text) {
    if (!text) return '';
    return text
      .replace(/\\'/g, "'")    // Unescape single quotes
      .replace(/\\"/g, '"')    // Unescape double quotes
      .replace(/\\\\/g, '\\')  // Handle escaped backslashes
      .replace(/&quot;/g, '"') // Handle HTML entities
      .replace(/&#027;/g, "'")
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace("&#x27;", "'")
  }

  $(function() {
    // Make the editor resizable
    $(".editor").resizable({
      handles: 'e', // Resizable from the east side (right side)
      resize: function(event, ui) {
        // Adjust the width of the preview container as the editor is resized
        let containerWidth = $(".latex-editor-container").width();
        let editorWidth = ui.size.width;
        $(".preview-container").width(containerWidth - editorWidth - 20); // Adjust preview width dynamically
      }
    });
  });

  // Initialize CodeMirror
  const editor = CodeMirror.fromTextArea(document.getElementById('latex-editor'), {
    mode: 'stex',
    theme: 'monokai', // Optional: change theme as desired
    lineNumbers: true,
    lineWrapping: true,
    autoCloseBrackets: true,
    matchBrackets: true,
  });

  // Function to debounce rapid function calls
  function debounce(func, wait) {
    let timeout;
    return function(...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Function to render LaTeX to HTML
  function renderLaTeX() {

    const latexContent = unescapeLatex(editor.getValue());
    console.log(latexContent);
    // Clear previous content
    const preview = document.getElementById('latex-preview');
    preview.innerHTML = '';

    try {
      // Initialize LaTeX.js generator
      const generator = new latexjs.HtmlGenerator({
        hyphenate: false, // Disable hyphenation if desired
        // You can add more options here
      });

      // Parse LaTeX content
      const documentObj = latexjs.parse(latexContent, { generator: generator });

      // Append styles and scripts
      preview.appendChild(generator.stylesAndScripts("https://cdn.jsdelivr.net/npm/latex.js/dist/"));

      // Append the rendered LaTeX
      preview.appendChild(generator.domFragment());
    } catch (error) {
      // Display error messages in the preview
      preview.innerHTML = `<pre style="color: red;">${error.message}</pre>`;
    }
  }

  // Debounced version to prevent excessive rendering
  const debouncedRender = debounce(renderLaTeX, 500);

  // Initial rendering
  renderLaTeX();

  // Set up event listener for changes in the editor
  editor.on('change', debouncedRender);

document.getElementById('save-latex').addEventListener('click', async () => {
  const latexContent = editor.getValue();
  const titleInput = document.getElementById('note-title');
  const title = titleInput.value.trim();

  if (!title) {
    alert('Please enter a title for your note.');
    titleInput.focus();
    return;
  }

  try {
    const response = await fetch('/save-latex', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        title,
        content: latexContent,
        category: 'LaTeX',
        username: '{{user.username}}',
      }),
    });

    if (response.ok) {
      alert('LaTeX content saved successfully!');
    } else {
      alert('Error saving LaTeX content');
    }
  } catch (error) {
    alert('Error occurred: ' + error.message);
  }
});

// Function to fetch and display user's notes in the dropdown
document.getElementById('load-notes-btn').addEventListener('click', async () => {
  try {
    const response = await fetch('/get-notes', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (response.ok) {
      const notes = await response.json();
      const dropdownMenu = document.getElementById('notes-dropdown');
      dropdownMenu.innerHTML = ''; // Clear old list items

      notes.forEach((note) => {
        const listItem = document.createElement('li');
        const linkItem = document.createElement('a');
        linkItem.classList.add('dropdown-item');
        linkItem.href = '#';
        linkItem.dataset.noteId = note.id; // Store the note's ID
        linkItem.textContent = note.title;
        listItem.appendChild(linkItem);
        dropdownMenu.appendChild(listItem);
      });
    } else {
      alert('Error fetching notes');
    }
  } catch (error) {
    alert('Error occurred: ' + error.message);
  }
});


// Function to load selected note into the editor
// Event delegation for dropdown items
document.getElementById('notes-dropdown').addEventListener('click', async function (event) {
  event.preventDefault();
  const target = event.target;
  if (target.classList.contains('dropdown-item')) {
    const noteId = target.dataset.noteId;

    try {
      const response = await fetch(`/get-note/${noteId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const note = await response.json();
        editor.setValue(note.content); // Load the note's content into the editor
        document.getElementById('note-title').value = note.title; // Set the title input
        renderLaTeX(); // Optionally trigger the rendering

        // Hide the dropdown menu after selection
        $('.dropdown-toggle').dropdown('hide');
      } else {
        alert('Error loading note');
      }
    } catch (error) {
      alert('Error occurred: ' + error.message);
    }
  }
});

document.getElementById('new-blank').addEventListener('click', () => {
  // Clear the title input
  document.getElementById('note-title').value = '';
  // Clear the editor content
  editor.setValue('');
  // Optionally re-render the preview
  renderLaTeX();
});

document.getElementById('new-from-text').addEventListener('click', () => {
  const textToLatexModal = new bootstrap.Modal(document.getElementById('textToLatexModal'));
  textToLatexModal.show();
});




const preview = document.getElementById('latex-preview');

  // Function to get the selected HTML within the preview
function getSelectedHtml() {
  const selection = window.getSelection();
  if (selection.rangeCount > 0) {
    // Check if the selection is within the preview area
    if (preview.contains(selection.anchorNode) && preview.contains(selection.focusNode)) {
      const range = selection.getRangeAt(0);
      const container = document.createElement('div');
      container.appendChild(range.cloneContents());
      return container.innerHTML;
    }
  }
  return '';
}


  // needed for storing the selected HTML
  let storedSelectedHtml = '';

  const aiEditBtn = document.getElementById('ai-edit-btn');
  let isTextSelected = false;

  let highlightedRange = null;

  function clearHighlight() {
    const highlights = preview.querySelectorAll('.preview-highlight');
    highlights.forEach(highlight => {
      const parent = highlight.parentNode;
      parent.replaceChild(document.createTextNode(highlight.textContent), highlight);
      parent.normalize(); // Merge adjacent text nodes
    });
    highlightedRange = null;
  }

  function highlightSelection(range) {
    clearHighlight(); // Clear any existing highlights
    
    // Create a document fragment with the highlighted content
    const fragment = range.cloneContents();
    const wrapper = document.createElement('span');
    wrapper.classList.add('preview-highlight');
    wrapper.appendChild(fragment);
    
    range.deleteContents();
    range.insertNode(wrapper);
    
    // Store the range for later reference
    highlightedRange = range;
    
    // Clear the user's selection
    window.getSelection().removeAllRanges();
  }

  function onSelectionChange() {
    const selection = window.getSelection();
    const selectedText = selection.toString().trim();
    
    if (selectedText && preview.contains(selection.anchorNode) && preview.contains(selection.focusNode)) {
      if (!isTextSelected) {
        aiEditBtn.textContent = 'Edit w/ AI';
        aiEditBtn.classList.add('active');
        isTextSelected = true;
        storedSelectedHtml = getSelectedHtml();
        
        // Highlight the selection
        highlightSelection(selection.getRangeAt(0));
      }
    } else {
      if (!highlightedRange) { // Only reset if we're not maintaining a highlight
        if (isTextSelected) {
          aiEditBtn.textContent = 'Highlight text for AI editing';
          aiEditBtn.classList.remove('active');
          isTextSelected = false;
          storedSelectedHtml = '';
        }
      }
    }
  }

  // Add event listeners for selection changes
  preview.addEventListener('mouseup', onSelectionChange);
  preview.addEventListener('keyup', onSelectionChange);

  // Update the AI edit button click handler
  aiEditBtn.addEventListener('click', () => {
    if (isTextSelected) {
      const contextModal = new bootstrap.Modal(document.getElementById('contextModal'));
      contextModal.show();
    }
  });

  // Add handlers for download and share buttons
  document.getElementById('download-preview').addEventListener('click', () => {
    const latexContent = editor.getValue();
    const titleInput = document.getElementById('note-title');
    let fileName = titleInput.value.trim();
    
    // If no title is set, use a default name
    if (!fileName) {
      fileName = 'untitled';
    }
    
    // Ensure the file has a .tex extension
    if (!fileName.endsWith('.tex')) {
      fileName += '.tex';
    }
    
    // Create a Blob containing the LaTeX content
    const blob = new Blob([latexContent], { type: 'text/plain' });
    
    // Create a temporary URL for the Blob
    const url = window.URL.createObjectURL(blob);
    
    // Create a temporary link element
    const downloadLink = document.createElement('a');
    downloadLink.href = url;
    downloadLink.download = fileName;
    
    // Append the link to the document, click it, and remove it
    document.body.appendChild(downloadLink);
    downloadLink.click();
    
    // Clean up
    document.body.removeChild(downloadLink);
    window.URL.revokeObjectURL(url);
  });

  document.getElementById('share-preview').addEventListener('click', async () => {
    // First save the current note
    const latexContent = editor.getValue();
    const titleInput = document.getElementById('note-title');
    const title = titleInput.value.trim();

    if (!title) {
      alert('Please enter a title before sharing.');
      titleInput.focus();
      return;
    }

    try {
      // Save the note first
      const saveResponse = await fetch('/save-latex', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title,
          content: latexContent,
          category: 'LaTeX',
          username: '{{user.username}}',
        }),
      });

      if (!saveResponse.ok) {
        throw new Error('Failed to save note');
      }

      // Fetch friends list
      const friendsResponse = await fetch('/get-friends-for-sharing');
      const friends = await friendsResponse.json();
      console.log(friends);

      // Create and show the sharing modal
      const modalHtml = `
        <div class="modal fade" id="shareModal" tabindex="-1">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">Share Note</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <form id="shareForm">
                  <div class="mb-3">
                    <label class="form-label">Share with:</label>
                    <select class="form-select" id="shareWith" required>
                      <option value="">Select a friend</option>
                      ${friends.map(friend => 
                        `<option value="${friend.friend_username}">${friend.friend_username}</option>`
                      ).join('')}
                    </select>
                  </div>
                  <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="canEdit">
                    <label class="form-check-label" for="canEdit">Allow editing</label>
                  </div>
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmShare">Share</button>
              </div>
            </div>
          </div>
        </div>
      `;

      // Add modal to document
      document.body.insertAdjacentHTML('beforeend', modalHtml);
      const shareModal = new bootstrap.Modal(document.getElementById('shareModal'));
      shareModal.show();

      // Handle share confirmation
      document.getElementById('confirmShare').addEventListener('click', async () => {
        const shareWith = document.getElementById('shareWith').value;
        const canEdit = document.getElementById('canEdit').checked;

        if (!shareWith) {
          alert('Please select a friend to share with.');
          return;
        }

        try {
          // Get the note ID from the save response
          const saveResponse = await fetch('/save-latex', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              title,
              content: latexContent,
              category: 'LaTeX',
              username: '{{user.username}}',
            }),
          });

          const saveData = await saveResponse.json();
          if (!saveData.success) {
            throw new Error('Failed to save note');
          }

          const shareResponse = await fetch('/share-note', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              noteId: saveData.noteId,
              shareWith,
              canEdit,
            }),
          });

          if (shareResponse.ok) {
            alert('Note shared successfully!');
            shareModal.hide();
          } else {
            throw new Error('Failed to share note');
          }
        } catch (error) {
          alert('Error sharing note: ' + error.message);
        }
      });

      // Clean up modal when hidden
      document.getElementById('shareModal').addEventListener('hidden.bs.modal', function () {
        this.remove();
      });

    } catch (error) {
      alert('Error: ' + error.message);
    }
  });


  //TODO: add event listener for the submitTextToTex button CHRIS
  


  // Event handler for the context modal submission CHRIS
  document.getElementById('submitContext').addEventListener('click', async () => {
    const latexSource = editor.getValue();
    const context = document.getElementById('contextInput').value.trim();

    // Prepare the data to be sent to the LLM
    const data = {
      selectedHtml: storedSelectedHtml,
      latexSource: latexSource,
      context: context,
    };

    try {
      const response = await fetch('/process-selection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        const result = await response.json();
        const updatedLatex = result.updatedLatex;
        editor.setValue(updatedLatex);
        renderLaTeX();
      } else {
        alert('Error processing your request.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while processing your request.');
    }

    // Clean up
    clearHighlight();
    
    // Hide modal
    const contextModal = bootstrap.Modal.getInstance(document.getElementById('contextModal'));
    contextModal.hide();
    
    // Reset states
    document.getElementById('contextInput').value = '';
    aiEditBtn.textContent = 'Highlight text for AI editing';
    aiEditBtn.classList.remove('active');
    isTextSelected = false;
  });

  // Update the modal hide handler
  document.getElementById('contextModal').addEventListener('hidden.bs.modal', function () {
    clearHighlight();
    document.getElementById('contextInput').value = '';
    
    // Reset button state
    aiEditBtn.textContent = 'Highlight text for AI editing';
    aiEditBtn.classList.remove('active');
    isTextSelected = false;
    
    // Re-render the preview
    renderLaTeX();
  });

  // Replace the existing convertToLatex event listener with this updated version
  document.getElementById('convertToLatex').addEventListener('click', async () => {
    const textInput = document.getElementById('textInput').value.trim();
    const instructions = document.getElementById('textInstructions').value.trim();
    
    if (!textInput) {
      alert('Please enter some text to convert.');
      return;
    }
    
    // Show loading state
    const convertBtn = document.getElementById('convertToLatex');
    const originalBtnHtml = convertBtn.innerHTML;
    convertBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Converting...';
    convertBtn.disabled = true;
    
    try {
      const response = await fetch('/rewrite-text', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: textInput,
          instructions: instructions
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to convert text');
      }

      const result = await response.json();
      
      // Update the editor with the converted LaTeX
      editor.setValue(result.latex);
      
      // Update the title if none exists
      const titleInput = document.getElementById('note-title');
      if (!titleInput.value.trim()) {
        titleInput.value = 'Converted Text ' + new Date().toLocaleDateString();
      }
      
      // Render the preview
      renderLaTeX();
      
      // Close the modal
      const textToLatexModal = bootstrap.Modal.getInstance(document.getElementById('textToLatexModal'));
      textToLatexModal.hide();
      
    } catch (error) {
      console.error('Error:', error);
      alert('Error converting text: ' + error.message);
    } finally {
      // Reset button state
      convertBtn.innerHTML = originalBtnHtml;
      convertBtn.disabled = false;
    }
  });

  // Add modal cleanup on hide
  document.getElementById('textToLatexModal').addEventListener('hidden.bs.modal', function () {
    document.getElementById('textInput').value = '';
    document.getElementById('textInstructions').value = '';
  });

</script>
