    <title>Your Notes</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f9f9f9;
        }

        .card:hover {
            transform: scale(1.02);
            transition: transform 0.2s;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .card-text {
            max-height: 60px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .section {
            margin-top: 40px;
        }

        .section-header {
            background-color: #007bff;
            color: white;
            padding: 10px 20px;
            border-radius: 5px 5px 0 0;
            font-size: 1.5rem;
        }

        .empty-state {
            text-align: center;
            color: #aaa;
            font-size: 1.2rem;
        }

        .empty-state-icon {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .notification {
            position: fixed;
            left: 50%;
            top: 20px;
            transform: translateX(-50%);
            padding: 15px 25px;
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
            z-index: 1000;
            min-width: 300px;
            text-align: center;
        }

        .notification.show {
            opacity: 1;
            z-index: 1500;
        }

        .notification.hide {
            opacity: 0;
            z-index: -1;
        }
    </style>

    <div class="container mt-5">
        <div id="notification" class="notification"></div>
        <!-- Your Notes Section -->
        <div class="section">
            <div class="section-header">Your Notes</div>
            <div class="card p-4 shadow-sm">
                {{#if notes.length}}
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    {{#each notes}}
                    <div class="col">
                        <div class="card shadow-sm h-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">{{safeLatex this.title}}</h5>
                                {{#if this.content}}
                                <p class="card-text small text-muted">{{truncateLatex this.content 100}}</p>
                                {{/if}}
                                <div class="mt-auto">
                                    <button onclick="loadNote('{{this.id}}')" class="btn btn-outline-secondary btn-sm">View/Edit</button>
                                    <button class="btn btn-outline-primary btn-sm share-note-btn" data-note-id="{{this.id}}">
                                        Share
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm delete-note-btn" data-note-id="{{this.id}}">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
                {{else}}
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <p>You have no saved notes. <a href="/editor" class="text-primary">Create a new note</a>.</p>
                </div>
                {{/if}}
            </div>
        </div>

        <!-- Friends' Notes Section -->
        <div class="section">
            <div class="section-header bg-success">Friends' Notes</div>
            <div class="card p-4 shadow-sm">
                {{#if friendsNotes.length}}
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    {{#each friendsNotes}}
                    <div class="col">
                        <div class="card shadow-sm h-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">{{safeLatex this.title}}</h5>
                                {{#if this.content}}
                                <p class="card-text small text-muted">{{truncateLatex this.content 100}}</p>
                                {{/if}}
                                <p class="card-text text-muted small">Shared by: {{this.username}}</p>
                                <div class="mt-auto">
                                    {{#if this.can_edit}}
                                    <a href="/edit-note/{{this.id}}" class="btn btn-outline-secondary btn-sm">View/Edit</a>
                                    {{else}}
                                    <a href="/edit-note/{{this.id}}?viewOnly=true" class="btn btn-outline-secondary btn-sm">View</a>
                                    {{/if}}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
                {{else}}
                <div class="empty-state">
                    <div class="empty-state-icon">üìÇ</div>
                    <p>Your friends have not shared any notes yet.</p>
                </div>
                {{/if}}
            </div>
        </div>

        <!-- Modals -->
        <!-- Delete Confirmation Modal -->
        <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Note</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">Are you sure you want to delete this note?</div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            let noteIdToDelete = null; // Variable to store the note ID to delete

            // Handle the Delete button click
            $('.delete-note-btn').on('click', function () {
                noteIdToDelete = $(this).data('note-id'); // Get the note ID from the button's data attribute
                $('#deleteConfirmationModal').modal('show'); // Show the confirmation modal
            });

            // Confirm Delete action
            $('#confirmDeleteBtn').on('click', function () {
                if (noteIdToDelete) {
                    // Send DELETE request to the server
                    $.ajax({
                        url: `/delete-note/${noteIdToDelete}`,
                        type: 'DELETE',
                        success: function () {
                            // If delete is successful, remove the corresponding card
                            $(`.delete-note-btn[data-note-id='${noteIdToDelete}']`).closest('.col').remove();
                            $('#deleteConfirmationModal').modal('hide'); // Hide the modal
                            noteIdToDelete = null; // Reset the note ID variable

                            // Show toast notification
                            const toast = new bootstrap.Toast(document.getElementById('deleteSuccessToast'));
                            toast.show();
                        },
                        error: function () {
                            showNotification('Failed to delete the note. Please try again.');
                        }
                    });
                }
            });
            // Share Note Handler
document.querySelectorAll('.share-note-btn').forEach(button => {
    button.addEventListener('click', async function () {
        const noteId = this.dataset.noteId;

        try {
            // Fetch friends list
            const friendsResponse = await fetch('/get-friends-for-sharing');
            const friends = await friendsResponse.json();

            // Generate and insert modal content
            const modalHtml = `
            <div class="modal fade" id="shareModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Share Note</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="shareForm">
                                <label for="shareWith" class="form-label">Select Friend to Share With:</label>
                                <select id="shareWith" class="form-select" required>
                                    <option value="">Select a friend</option>
                                    ${friends.map(friend =>
                `<option value="${friend.friend_username}">${friend.friend_username}</option>`
            ).join('')}
                                </select>
                                <label for="permissionLevel" class="form-label mt-3">Permission Level:</label>
                                <select id="permissionLevel" class="form-select" required>
                                    <option value="view">View Only</option>
                                    <option value="edit">View and Edit</option>
                                </select>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelShareBtn">Cancel</button>
                            <button type="button" class="btn btn-primary" id="confirmShare">Share</button>
                        </div>
                    </div>
                </div>
            </div>
        `;

            // Insert and show the share modal
            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const shareModal = new bootstrap.Modal(document.getElementById('shareModal'));
            shareModal.show();

            // Confirm share action
            document.getElementById('confirmShare').addEventListener('click', async () => {
                const shareWith = document.getElementById('shareWith').value;
                const permissionLevel = document.getElementById('permissionLevel').value;
                const canEdit = permissionLevel === 'edit';

                if (!shareWith) {
                    showNotification('Please select a friend to share with.');
                    return;
                }

                try {
                    const shareResponse = await fetch('/share-note', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            noteId: noteId,
                            shareWith: shareWith,
                            canEdit: canEdit,
                        })
                    });

                    if (shareResponse.ok) {
                        showNotification('Note shared successfully!');
                        shareModal.hide();
                        document.getElementById('shareModal').remove();
                    } else {
                        throw new Error('Failed to share note');
                    }
                } catch (error) {
                    showNotification('Error sharing note: ' + error.message);
                }
            });

            // Remove the modal from the DOM after hiding
            document.getElementById('shareModal').addEventListener('hidden.bs.modal', function () {
                this.remove();
            });

        } catch (error) {
            showNotification('Error fetching friends: ' + error.message);
        }
                    });
                });


            // Share Note functionality is already implemented
        });

        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    notification.classList.remove('show', 'hide');
                }, 500);
            }, 3000);
        }

        async function loadNote(noteId) {
            try {
                const response = await fetch(`/get-note/${noteId}`);
                if (!response.ok) throw new Error('Failed to fetch note');
                
                const note = await response.json();
                
                // Store note data in sessionStorage
                sessionStorage.setItem('note_content', note.content);
                sessionStorage.setItem('note_title', note.title);
                sessionStorage.setItem('note_id', note.id);
                
                // Redirect to editor
                window.location.href = `/editor?loadNote=true`;
            } catch (error) {
                console.error('Error:', error);
                showNotification('Error loading note: ' + error.message);
            }
        }
    </script>
