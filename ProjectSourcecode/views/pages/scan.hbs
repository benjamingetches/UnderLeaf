<style>

    
    body {
        background-color: white;
    }

    .scan-header {
        background: linear-gradient(135deg, #8cb67d 0%, #accaa1 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        border-radius: 0 0 10px 10px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
    }

    .scan-header h1 {
        font-weight: 300;
        margin: 0;
    }

    .scan-header p {
        margin: 10px 0 0;
        opacity: 0.9;
    }

    .scan-container {
        display: flex;
        flex-direction: column;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        gap: 20px;
    }

    /* Updated card styles to match editor */
    .scan-card {
        background: #e6eae6;
        border: none;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        margin-bottom: 20px;
    }

    .scan-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    /* Updated preview container */
    #previewContainer {
        display: flex;
        flex-direction: column;
        gap: 16px;
        margin-top: 20px;
        height: 500px;
        overflow-y: auto;
    }

    .preview-item {
        width: 100%;
        height: auto;
        max-height: 600px;
    }

    .preview-item img {
        width: 100%;
        height: auto;
        max-height: 600px;
        object-fit: contain;
    }

    .preview-item .remove-btn {
        position: absolute;
        top: 8px;
        right: 8px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .scan-section, .results-section {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .instructions-card {
        flex: 1;
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .upload-section {
        flex: 1;
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
    }

    .video-container {
        margin-top: 20px;
        width: 100%;
        aspect-ratio: 16/9;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
    }

    .upload-area {
        border: 2px dashed #ccc;
        border-radius: 4px;
        padding: 20px;
        text-align: center;
        margin: 20px 0;
        cursor: pointer;
    }

    .upload-area:hover {
        border-color: #007bff;
    }

    .preview-image {
        max-width: 100%;
        max-height: 300px;
        margin-top: 20px;
        display: none;
    }

    .notification {
        position: fixed;
        left: 50%;
        top: 20px;
        transform: translateX(-50%);
        padding: 15px 25px;
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        z-index: 1000;
        min-width: 300px;
        text-align: center;
    }

    .notification.show {
        opacity: 1;
        z-index: 1500;
    }

    .notification.hide {
        opacity: 0;
        z-index: -1;
    }

    /* Update button styles */
    .btn-primary {
        background-color: #8cb67d;
        border: none;
        padding: 0.5rem 1.5rem;
        transition: background-color 0.2s ease;
    }

    .btn-primary:hover {
        background-color: #638159;
    }

    .scan-content {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 20px;
        margin-top: 20px;
    }

    .premium-info-card {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        height: fit-content;
    }

    .credits-counter {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin: 15px 0;
        text-align: center;
    }

    .credits-counter h3 {
        color: #8cb67d;
        font-size: 2rem;
        margin: 0;
    }

    .credits-counter p {
        margin: 5px 0 0;
        color: #666;
    }

    .premium-features {
        margin: 15px 0;
    }

    .premium-features li {
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .premium-features li i {
        color: #8cb67d;
    }

    .upgrade-btn {
        width: 100%;
        background: #ffd700;
        color: #000;
        border: none;
        padding: 10px;
        border-radius: 5px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .upgrade-btn:hover {
        background: #ffc800;
        transform: translateY(-2px);
    }
</style>

<div id="notification" class="notification"></div>

<div class="scan-header">
    <div class="container">
        <h1>Scan Handwritten Math</h1>
        <p>Upload images of your handwritten math notes for automatic LaTeX conversion</p>
    </div>
</div>

<div class="scan-container">
    <div class="scan-content">
        <!-- Premium Info Panel -->
        <div class="premium-info-card">
            <h4>Premium Feature</h4>
            <div class="credits-counter">
                <h3 id="creditsLeft">{{user.ai_credits}}</h3>
                <p>Free Credits Left</p>
            </div>
            <p class="text-muted">Credits refresh weekly. Next refresh in 5 days.</p>
            
            <div class="premium-features">
                <h5>Premium Benefits:</h5>
                <ul class="list-unstyled">
                    <li><i class="fas fa-infinity"></i> Unlimited Scans</li>
                    <li><i class="fas fa-bolt"></i> Priority Processing</li>
                    <li><i class="fas fa-cloud-upload-alt"></i> Bulk Upload</li>
                </ul>
            </div>
            
            <button class="upgrade-btn">
                <i class="fas fa-crown me-2"></i>Upgrade to Premium
            </button>
        </div>

        <!-- Main Scan Area -->
        <div class="scan-card">
            <form id="scanForm">
                <div class="form-group mb-4">
                    <label for="imageInput" class="form-label">Choose Images to Upload</label>
                    <div class="custom-file">
                        <input type="file" class="form-control" id="imageInput" accept="image/*" multiple>
                    </div>
                </div>
                <div id="previewContainer">
                    <!-- Previews go here -->
                </div>
                <button type="submit" class="btn btn-primary mt-4 px-4">
                    <i class="fas fa-magic me-2"></i>Process Images
                </button>
            </form>
        </div>
    </div>
</div>

<!-- Modal for processed content -->
<div class="modal fade" id="processedModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Note from Scanned Images</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="saveLatexForm">
                    <div class="form-group mb-3">
                        <label for="noteTitle">Note Title</label>
                        <input type="text" class="form-control" id="noteTitle" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="category">Category</label>
                        <input type="text" class="form-control" id="category" value="scanned">
                    </div>
                    
                    <div class="form-group">
                        <label>Processed LaTeX Content</label>
                        <div id="processedContent" class="border p-3 bg-light" style="max-height: 300px; overflow-y: auto; font-family: monospace;">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveNote">Save Note</button>
            </div>
        </div>
    </div>
</div>

<script>
    let processedLatexContent = '';
    let imageQueue = [];

    // File input change handler
function handleFileSelect(event, previewContainerId) {
    const files = event.target.files;
    const container = document.getElementById(previewContainerId);
    
    for (let file of files) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const preview = document.createElement('div');
            preview.className = 'preview-item';
            preview.innerHTML = `
                <img src="${e.target.result}" alt="Preview">
                <button type="button" class="remove-btn" 
                        onclick="this.parentElement.remove()">Ã—</button>
            `;
            container.appendChild(preview);
            imageQueue.push(e.target.result);
        };
        reader.readAsDataURL(file);
    }
}
async function compressImage(base64Image) {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = function() {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // More aggressive size reduction
            const MAX_WIDTH = 800;
            const MAX_HEIGHT = 800;
            
            let width = img.width;
            let height = img.height;
            
            // Calculate new dimensions
            if (width > height) {
                if (width > MAX_WIDTH) {
                    height *= MAX_WIDTH / width;
                    width = MAX_WIDTH;
                }
            } else {
                if (height > MAX_HEIGHT) {
                    width *= MAX_HEIGHT / height;
                    height = MAX_HEIGHT;
                }
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // Draw image with white background (helps with OCR)
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, width, height);
            ctx.drawImage(img, 0, 0, width, height);
            
            // Compress more aggressively (0.5 quality)
            const compressedImage = canvas.toDataURL('image/jpeg', 0.5);
            resolve(compressedImage);
        };
        img.src = base64Image;
    });
}
    // Process a single image
async function processImageToLatex(base64Image) {
    try {
        const compressedImage = await compressImage(base64Image);
        const response = await fetch('/photo-to-latex', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                photo: compressedImage
            })
        });

        // Add logging here
        
        if (response.status === 403) {
            const errorData = await response.json();
            
            // Show the modal directly here instead of using handleAIError
            const resetDate = new Date(errorData.last_credit_reset);
            
            const nextReset = new Date(resetDate);
            nextReset.setDate(nextReset.getDate() + 7);
            
            const dateString = nextReset.toLocaleString('en-US', {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: true
            });
            
            const refreshSpan = document.querySelector('#noCreditsModal .refresh-date');
            if (refreshSpan) {
                refreshSpan.textContent = dateString;
            }
            
            const noCreditsModal = new bootstrap.Modal(document.getElementById('noCreditsModal'));
            noCreditsModal.show();
            return null;
        }

        if (!response.ok) {
            throw new Error('Failed to process image');
        }

        const data = await response.json();
        return data.latex;
    } catch (error) {
        console.error('Error in processImageToLatex:', error);
        throw error;
    }
}

    // Process all images in queue
async function processAllImages() {
    let allLatex = '';
    const processedContent = document.getElementById('processedContent');
    
    for (let i = 0; i < imageQueue.length; i++) {
        processedContent.textContent = `Processing image ${i + 1} of ${imageQueue.length}...`;
        try {
            const latex = await processImageToLatex(imageQueue[i]);
            if (latex === null) {
                // Credits ran out, stop processing
                return;
            }
            allLatex += latex + '\n\n';
            processedContent.textContent = allLatex;
        } catch (error) {
            processedContent.textContent += `\nError processing image ${i + 1}: ${error.message}\n`;
            console.error(`Error processing image ${i + 1}:`, error);
        }
    }
    return allLatex.trim();
}


    // Form submission handler
    document.getElementById('scanForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitButton = e.target.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Processing...';

        try {
            processedLatexContent = await processAllImages();
            
            // Only show the processed modal if we got content back
            if (processedLatexContent) {
                document.getElementById('processedContent').textContent = processedLatexContent;
                const modal = new bootstrap.Modal(document.getElementById('processedModal'));
                modal.show();
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error processing images: ' + error.message);
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = 'Process Images';
        }
    });

    // Save note handler
    document.getElementById('saveNote').addEventListener('click', async () => {
        const saveButton = document.getElementById('saveNote');
        saveButton.disabled = true;
        saveButton.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';

        try {
            const response = await fetch('/save-latex', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: document.getElementById('noteTitle').value,
                    content: processedLatexContent,
                    category: 'LaTeX',
                    username: '{{user.username}}'
                })
            });

            const data = await response.json();
            
            if (data.success) {
                // Store the note data in sessionStorage before redirecting
                sessionStorage.setItem('note_content', processedLatexContent);
                sessionStorage.setItem('note_title', document.getElementById('noteTitle').value);
                sessionStorage.setItem('note_id', data.noteId);

                showNotification('Note saved successfully!', true);
                setTimeout(() => {
                    window.location.href = `/editor?loadNote=true`;
                }, 1500);
            } else {
                throw new Error(data.error || 'Failed to save note');
            }
        } catch (error) {
            console.error('Error:', error);
            showNotification('Error saving note: ' + error.message);
        } finally {
            saveButton.disabled = false;
            saveButton.innerHTML = 'Save Note';
        }
    });

    // Event listeners for file inputs
    document.getElementById('imageInput').addEventListener('change', (e) => handleFileSelect(e, 'previewContainer'));
    document.getElementById('additionalImages').addEventListener('change', (e) => handleFileSelect(e, 'modalImagePreviews'));
    function showNotification(message, redirect = false) {
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.classList.add('show');
        
        if (redirect) {
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    notification.classList.remove('show', 'hide');
                }, 500);
            }, 1500); // Show for less time since we're redirecting
        } else {
            setTimeout(() => {
                notification.classList.add('hide');
                setTimeout(() => {
                    notification.classList.remove('show', 'hide');
                }, 500);
            }, 3000);
        }
    }

    // Add this to your existing script
    document.addEventListener('DOMContentLoaded', function() {
        // Fetch and update credits (replace with actual API call)
        fetch('/get-user-credits')
            .then(response => response.json())
            .then(data => {
                document.getElementById('creditsLeft').textContent = data.credits || 10;
            })
            .catch(error => console.error('Error fetching credits:', error));
    });
</script>